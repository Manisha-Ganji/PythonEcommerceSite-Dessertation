
Prerequisites:

1. EC2 instance (t2.micro)  with Linux opertating system installed setup and running in us-east-1
2. Under EC2 security groups add a new inbound rule (TCP) with port 5000 and source as 0.0.0.0/0 (or u can give public IP of EC2 to retrict access only to EC2)

--------------------------------------------------------------------------------------------------------------------------------------------------------------
#!/bin/bash

LOG_FILE="/home/ec2-user/user-data.log"
sudo chown ec2-user:ec2-user /home/ec2-user/user-data.log
sudo chmod 664 /home/ec2-user/user-data.log

echo "User data script started at: $(date)" | tee -a $LOG_FILE

# Prevent cloud-init from blocking re-runs
sudo touch /etc/cloud/cloud-init.disabled

# Update system packages
echo "Updating system packages..." | tee -a $LOG_FILE
sudo yum update -y

# Install necessary dependencies
install_package() {
    if ! rpm -q "$1" &>/dev/null; then
        echo "Installing $1..." | tee -a $LOG_FILE
        sudo yum install -y "$1"
    else
        echo "$1 is already installed." | tee -a $LOG_FILE
    fi
}

install_package telnet
install_package python3
install_package python3-pip
install_package git

# Set environment variables (persisting in /etc/environment)
echo "Setting environment variables..." | tee -a $LOG_FILE
cat <<EOL | sudo tee -a /etc/environment
export DB_HOST="ecommappdbprimary.cp8u60euuktu.us-east-1.rds.amazonaws.com"
export DB_USER="postgres"
export DB_PASSWORD="SanMan2020"
export DB_NAME="ecommappdbprimary"
export S3_BUCKET_NAME="ecommerce-product-images-primary"
EOL

# Reload environment variables
source /etc/environment

# Switch to ec2-user
sudo -i -u ec2-user bash << 'EOF'

LOG_FILE="/home/ec2-user/user-data.log"
PROJECT_DIR="/home/ec2-user/PythonEcommerceSite-Dessertation"
VENV_DIR="$PROJECT_DIR/venv"

echo "Switching to ec2-user..." | tee -a $LOG_FILE
cd /home/ec2-user

# Clone or update the repository
if [ ! -d "$PROJECT_DIR" ]; then
    echo "Cloning repository..." | tee -a $LOG_FILE
    git clone https://github.com/Manisha-Ganji/PythonEcommerceSite-Dessertation
else
    echo "Updating repository..." | tee -a $LOG_FILE
    cd "$PROJECT_DIR"
    git reset --hard
    git checkout main
    git fetch --all
    git pull origin main --force
    
    cd ..
    cd ..
fi

# Install virtualenv if not installed
if ! command -v virtualenv &>/dev/null; then
    echo "Installing virtualenv..." | tee -a $LOG_FILE
    pip3 install virtualenv
else
    echo "virtualenv is already installed." | tee -a $LOG_FILE
fi

# Set up virtual environment
echo "Setting up Python virtual environment..." | tee -a $LOG_FILE
cd "$PROJECT_DIR"
if [ ! -d "$VENV_DIR" ]; then
    python3 -m venv venv
fi
source venv/bin/activate

# Install project dependencies
echo "Installing Python dependencies..." | tee -a $LOG_FILE
pip install --upgrade pip
pip install -r requirements.txt

EOF

# Create systemd service file for Flask
echo "Creating systemd service for Flask..." | tee -a $LOG_FILE
cat <<EOL | sudo tee /etc/systemd/system/flask-app.service
[Unit]
Description=Flask App
After=network.target

[Service]
User=ec2-user
WorkingDirectory=/home/ec2-user/PythonEcommerceSite-Dessertation/src
ExecStart=/home/ec2-user/PythonEcommerceSite-Dessertation/venv/bin/python -m flask run --host=0.0.0.0 --port=5000
Restart=always
Environment="FLASK_APP=eCommerceApp.py"
Environment="FLASK_ENV=development"
Environment="DB_HOST=ecommappdbprimary.cp8u60euuktu.us-east-1.rds.amazonaws.com"
Environment="DB_USER=postgres"
Environment="DB_PASSWORD=SanMan2020"
Environment="DB_NAME=ecommappdbprimary"
Environment="S3_BUCKET_NAME=ecommerce-product-images-primary"

[Install]
WantedBy=multi-user.target
EOL

# Reload systemd, enable and start the service
sudo systemctl daemon-reload
sudo systemctl enable flask-app
sudo systemctl restart flask-app

echo "User data script completed at: $(date)" | tee -a $LOG_FILE
